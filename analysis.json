{
  "schema_version": "1.0.0",
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "dist/umd/vaadin-router.js",
      "properties": [],
      "methods": [
        {
          "name": "getRoutes",
          "description": "Returns the current list of routes (as a shallow copy). Adding / removing\nroutes to / from the returned array does not affect the routing config,\nbut modifying the route objects does.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 877,
              "column": 4
            },
            "end": {
              "line": 879,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!Route>"
          }
        },
        {
          "name": "setRoutes",
          "description": "Sets the routing config (replacing the existing one).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 887,
              "column": 4
            },
            "end": {
              "line": 890,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ]
        },
        {
          "name": "addRoutes",
          "description": "Appends one or several routes to the routing config and returns the\neffective routing config after the operation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 901,
              "column": 4
            },
            "end": {
              "line": 904,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ],
          "return": {
            "type": "!Array.<!Route>"
          }
        },
        {
          "name": "resolve",
          "description": "Asynchronously resolves the given pathname, i.e. finds all routes matching\nthe pathname and tries resolving them one after another in the order they\nare listed in the routes config until the first non-null result.\n\nReturns a promise that is fulfilled with the return value of the first\nroute handler that returns something other than `null` or `undefined`.\n\nIf no route handlers return a non-null result, or if no route matches the\ngiven pathname the returned promise is rejected with a 'page not found'\n`Error`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 923,
              "column": 4
            },
            "end": {
              "line": 988,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   resolve or a context object with a `pathname` property and other\n   properties to pass to the route resolver functions."
            }
          ],
          "return": {
            "type": "!Promise.<any>"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 856,
          "column": 2
        },
        "end": {
          "line": 989,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Resolver"
    },
    {
      "description": "A simple client-side router for single-page applications. It uses\nexpress-style middleware and has a first-class support for Web Components and\nlazy-loading. Works great in Polymer and non-Polymer apps.\n\n### Basic example\n```\nimport {Router} from '@vaadin/router';\n\nconst router = new Router(document.getElementById('outlet'));\nrouter.setRoutes([\n  {path: '/', component: 'x-home-view'},\n  {path: '/users', component: 'x-user-list'}\n]);\n```\n\n### Lazy-loading example\nA bit more involved example with lazy-loading:\n```\nimport {Router} from '@vaadin/router';\n\nconst routes = [\n  {path: '/', component: 'x-home-view'},\n  {\n    path: '/users',\n    bundle: 'bundles/user-bundle.html',\n    children: [\n      {path: '/', component: 'x-user-list'},\n      {path: '/:user', component: 'x-user-profile'}\n    ]\n  }\n];\n\nconst router = new Router(document.getElementById('outlet'));\nrouter.setRoutes(routes);\n```\n\n### Middleware example\nA more complex example with custom route handlers and server-side rendered\ncontent:\n```\nimport {Router} from '@vaadin/router';\n\nconst routes = [\n  {\n    path: '/',\n    action: async (context) => {\n      // record the navigation completed event for analytics\n      analytics.recordNavigationStart(context.path);\n\n      // let the navigation happen and wait for the result\n      const result = await context.next();\n\n      // record the navigation completed event for analytics\n      analytics.recordNavigationEnd(context.path, result.status);\n\n      // pass the result up the handlers chain\n      return result;\n    }\n  },\n  {\n    path: '/',\n    component: 'x-home-view'\n  },\n  {\n    path: '/users',\n    bundle: 'bundles/user-bundle.html',\n    children: [\n      {path: '/', component: 'x-user-list'},\n      {path: '/:user', component: 'x-user-profile'}\n    ]\n  },\n  {\n    path: '/server',\n    action: async (context) => {\n      // fetch the server-side rendered content\n      const result = await fetch(context.path, {...});\n\n      // modify the content if necessary\n      result.body = result.body.replace(/bad/ig, 'good');\n\n      // create DOM objects out of the server-side result (string)\n      return renderToDom(result);\n    }\n  }\n];\n\nconst router = new Router(document.getElementById('outlet'));\nrouter.setRoutes(routes);\n```\n\nFor more detailed information on the route object properties, refer to 'setRoutes' method description.",
      "summary": "JavaScript class that renders different DOM content depending on\n   a given path. It can re-render when triggered or automatically on\n   'popstate' and / or 'click' events.",
      "path": "dist/umd/vaadin-router.js",
      "properties": [
        {
          "name": "ready",
          "type": "!Promise.<?Node>",
          "description": "A promise that is settled after the current render cycle completes. If\nthere is no render cycle in progress the promise is immediately settled\nwith the last render cycle result.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1172,
              "column": 6
            },
            "end": {
              "line": 1172,
              "column": 17
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "getRoutes",
          "description": "Returns the current list of routes (as a shallow copy). Adding / removing\nroutes to / from the returned array does not affect the routing config,\nbut modifying the route objects does.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 877,
              "column": 4
            },
            "end": {
              "line": 879,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!Route>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "setRoutes",
          "description": "Sets the routing config (replacing the existing one) and triggers a\nnavigation event so that the router outlet is refreshed according to the\ncurrent `window.location` and the new routing config.\n\nEach route object may have the following properties, listed here in the processing order:\n* {!string} path – the route path (relative to the parent route if any) in the\n<a href=\"https://expressjs.com/en/guide/routing.html#route-paths\" target=\"_blank\">express.js syntax</a>.\n\n* {?function(context, params)} action – the action that is executed before the route is resolved.\nIf present, action property is always processed first, disregarding of the other properties' presence.\nIf action returns a value, current route resolution is finished (i.e. other route properties are not processed).\n'context' parameter can be used for asynchronously getting the resolved route contents via 'context.next()'\n'params' parameter contains route parameters\n\n* {?string} redirect – other route's path to redirect to. Passes all route parameters to the redirect target.\nThe target route should also be defined.\n\n* {?string} bundle – '*.js' or '*.mjs' bundles to load before resolving the route. Each bundle is loaded only once.\nIs not triggered when either an 'action' returns the result or 'redirect' property is present.\n\n* {?string} component – the tag name of the Web Component to resolve the route to.\nIs not considered when either an 'action' returns the result or 'redirect' property is present.\n\n* {?Array<Object>} children – nested routes. Parent routes' properties are executed before resolving the children.\nChildren 'path' values are relative to the parent ones.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1234,
              "column": 4
            },
            "end": {
              "line": 1237,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Object> | !Object)",
              "description": "a single route or an array of those"
            }
          ]
        },
        {
          "name": "addRoutes",
          "description": "Appends one or several routes to the routing config and returns the\neffective routing config after the operation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 901,
              "column": 4
            },
            "end": {
              "line": 904,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ],
          "return": {
            "type": "!Array.<!Route>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "resolve",
          "description": "Asynchronously resolves the given pathname, i.e. finds all routes matching\nthe pathname and tries resolving them one after another in the order they\nare listed in the routes config until the first non-null result.\n\nReturns a promise that is fulfilled with the return value of the first\nroute handler that returns something other than `null` or `undefined`.\n\nIf no route handlers return a non-null result, or if no route matches the\ngiven pathname the returned promise is rejected with a 'page not found'\n`Error`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 923,
              "column": 4
            },
            "end": {
              "line": 988,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   resolve or a context object with a `pathname` property and other\n   properties to pass to the route resolver functions."
            }
          ],
          "return": {
            "type": "!Promise.<any>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "setOutlet",
          "description": "Sets the router outlet (the DOM node where the content for the current\nroute is inserted). Any content pre-existing in the router outlet is\nremoved at the end of each render pass.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1189,
              "column": 4
            },
            "end": {
              "line": 1194,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "outlet",
              "type": "?Node",
              "description": "the DOM node where the content for the current route\n    is inserted."
            }
          ]
        },
        {
          "name": "getOutlet",
          "description": "Returns the current router outlet. The initial value is `undefined`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1201,
              "column": 4
            },
            "end": {
              "line": 1203,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "?Node",
            "desc": "the current router outlet (or `undefined`)"
          }
        },
        {
          "name": "render",
          "description": "Asynchronously resolves the given pathname and renders the resolved route\ncomponent into the router outlet. If no router outlet is set at the time of\ncalling this method, or at the time when the route resolution is completed,\na `TypeError` is thrown.\n\nReturns a promise that is fulfilled with the router outlet DOM Node after\nthe route component is created and inserted into the router outlet, or\nrejected if no route matches the given path.\n\nIf another render pass is started before the previous one is completed, the\nresult of the previous render pass is ignored.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1257,
              "column": 4
            },
            "end": {
              "line": 1291,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   render or a context object with a `pathname` property and other\n   properties to pass to the resolver."
            },
            {
              "name": "shouldUpdateHistory"
            }
          ],
          "return": {
            "type": "!Promise.<!Node>"
          }
        },
        {
          "name": "__ensureOutlet",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1293,
              "column": 4
            },
            "end": {
              "line": 1297,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "outlet = this.__outlet"
            }
          ]
        },
        {
          "name": "__updateBrowserHistory",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1299,
              "column": 4
            },
            "end": {
              "line": 1305,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext"
            }
          ]
        },
        {
          "name": "__setOutletContent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1307,
              "column": 4
            },
            "end": {
              "line": 1319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ]
        },
        {
          "name": "subscribe",
          "description": "Subscribes this instance to navigation events on the `window`.\n\nNOTE: beware of resource leaks. For as long as a router instance is\nsubscribed to navigation events, it won't be garbage collected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1327,
              "column": 4
            },
            "end": {
              "line": 1330,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "unsubscribe",
          "description": "Removes the subscription to navigation events created in the `subscribe()`\nmethod.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1336,
              "column": 4
            },
            "end": {
              "line": 1339,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__onNavigationEvent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1341,
              "column": 4
            },
            "end": {
              "line": 1346,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        }
      ],
      "staticMethods": [
        {
          "name": "renderComponent",
          "description": "Creates and returns an instance of a given custom element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1356,
              "column": 4
            },
            "end": {
              "line": 1364,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "component",
              "type": "!string",
              "description": "tag name of a web component to render"
            },
            {
              "name": "context",
              "type": "?context",
              "description": "an optional context object"
            }
          ],
          "return": {
            "type": "!HTMLElement"
          }
        },
        {
          "name": "setTriggers",
          "description": "Configures what triggers Vaadin.Router navigation events:\n - `POPSTATE`: popstate events on the current `window`\n - `CLICK`: click events on `<a>` links leading to the current page\n\nBy default, both `POPSTATE` and `CLICK` are enabled.\nBelow is an example of how to only use one of them:\n\n```\nimport {Router} from '@vaadin/router';\nimport CLICK from '@vaadin/router/triggers/click';\n\nRouter.setTriggers(POPSTATE);\n// or, if you only need click:\n// Router.setTriggers(CLICK);\n```\n\nThe `POPSTATE` and `CLICK` navigation triggers need to be imported\nseparately to enable efficient tree shaking: if the app does not use `<a>`\nclicks as navigation triggers, you should be able to exclude the code\nneeded to handle them from the bundle.\n\nSee the `router-config.js` for the default navigation triggers config.\nBased on this file, you can create the own one and import it instead.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1393,
              "column": 4
            },
            "end": {
              "line": 1395,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "triggers",
              "type": "...NavigationTrigger",
              "rest": true
            }
          ]
        }
      ],
      "demos": [
        {
          "url": "demo",
          "description": ""
        },
        {
          "url": "demo",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 1143,
          "column": 2
        },
        "end": {
          "line": 1396,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "Vaadin.Resolver",
      "name": "Vaadin.Router"
    }
  ]
}
