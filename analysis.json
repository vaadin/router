{
  "schema_version": "1.0.0",
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "dist/vaadin-router.js",
      "properties": [],
      "methods": [
        {
          "name": "getRoutes",
          "description": "Returns the current list of routes (as a shallow copy). Adding / removing\nroutes to / from the returned array does not affect the routing config,\nbut modifying the route objects does.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 894,
              "column": 2
            },
            "end": {
              "line": 896,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!Route>"
          }
        },
        {
          "name": "setRoutes",
          "description": "Sets the routing config (replacing the existing one).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 907,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addRoutes",
          "description": "Appends one or several routes to the routing config and returns the\neffective routing config after the operation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 918,
              "column": 2
            },
            "end": {
              "line": 921,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ],
          "return": {
            "type": "!Array.<!Route>"
          }
        },
        {
          "name": "resolve",
          "description": "Asynchronously resolves the given pathname, i.e. finds all routes matching\nthe pathname and tries resolving them one after another in the order they\nare listed in the routes config until the first non-null result.\n\nReturns a promise that is fulfilled with the return value of an object that consists of the first\nroute handler result that returns something other than `null` or `undefined` and context used to get this result.\n\nIf no route handlers return a non-null result, or if no route matches the\ngiven pathname the returned promise is rejected with a 'page not found'\n`Error`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 940,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   resolve or a context object with a `pathname` property and other\n   properties to pass to the route resolver functions."
            }
          ],
          "return": {
            "type": "!Promise.<any>"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 873,
          "column": 0
        },
        "end": {
          "line": 1009,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "Vaadin.Resolver"
    },
    {
      "description": "A simple client-side router for single-page applications. It uses\nexpress-style middleware and has a first-class support for Web Components and\nlazy-loading. Works great in Polymer and non-Polymer apps.\n\nUse `new Router(outlet)` to create a new Router instance. The `outlet` parameter is a reference to the DOM node\nto render the content into. The Router instance is automatically subscribed to navigation events on `window`.\n\nSee [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html) for the detailed usage demo and code snippets.\n\nSee also detailed API docs for the following methods, for the advanced usage:\n\n* [setOutlet](#/classes/Vaadin.Router#method-setOutlet) – should be used to configure the outlet.\n* [setTriggers](#/classes/Vaadin.Router#method-setTriggers) – should be used to configure the navigation events.\n* [setRoutes](#/classes/Vaadin.Router#method-setRoutes) – should be used to configure the routes.\n\nOnly `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.",
      "summary": "JavaScript class that renders different DOM content depending on\n   a given path. It can re-render when triggered or automatically on\n   'popstate' and / or 'click' events.",
      "path": "dist/vaadin-router.js",
      "properties": [
        {
          "name": "ready",
          "type": "!Promise.<?Node>",
          "description": "A promise that is settled after the current render cycle completes. If\nthere is no render cycle in progress the promise is immediately settled\nwith the last render cycle result.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1104,
              "column": 4
            },
            "end": {
              "line": 1104,
              "column": 15
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "getRoutes",
          "description": "Returns the current list of routes (as a shallow copy). Adding / removing\nroutes to / from the returned array does not affect the routing config,\nbut modifying the route objects does.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 894,
              "column": 2
            },
            "end": {
              "line": 896,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!Route>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "setRoutes",
          "description": "Sets the routing config (replacing the existing one) and triggers a\nnavigation event so that the router outlet is refreshed according to the\ncurrent `window.location` and the new routing config.\n\nEach route object may have the following properties, listed here in the processing order:\n* `path` – the route path (relative to the parent route if any) in the\n[express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n\n* `action` – the action that is executed before the route is resolved.\nThe value for this property should be a function, accepting a `context` parameter.\nIf present, this function is always invoked first, disregarding of the other properties' presence.\nIf the action returns a non-empty result, current route resolution is finished and other route config properties are ignored.\n`context` parameter can be used for asynchronously getting the resolved route contents via `context.next()`\nand for getting route parameters via `context.params`.\nSee also **Route Actions** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).\n\n* `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.\nThe target route should also be defined.\nSee also **Redirects** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).\n\n* `bundle` – `.js` or `.mjs` bundle to load before resolving the route. Each bundle is only loaded once.\nThe property is ignored when either an `action` returns the result or `redirect` property is present.\nAny error, e.g. 404 while loading bundle will cause route resolution to throw.\nSee also **Lazy Loading** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).\n\n* `component` – the tag name of the Web Component to resolve the route to.\nThe property is ignored when either an `action` returns the result or `redirect` property is present.\n\n* `children` – nested routes. Parent routes' properties are executed before resolving the children.\nChildren 'path' values are relative to the parent ones.\n\n* `inactivate` – after each resolution, router marks each route used in the resolution as an active route:\nif a hierarchy of '/a', '/b' (child of '/a'), '/c' (child of '/b') routes was defined, and user visits '/a/b/c' path,\nrouter will track ['/a', '/b', '/c'] routes as active ones, remembering their order also.\nDuring the next resolution, router compares new routes used in the resolution and,\nat the moment when they start to differ from the active ones, router calls 'inactivate' method on each route that is different:\nif, for previous example, user visits '/a/d' path and it's a valid path, routes '/c' and '/b' will be inactivated.\nInactivation always happens from the last active element to the first that is different from the new route,\nif the method is not defined for any route, the route is skipped.\nEach `inactivate` call gets a `context` parameter, described above.\nIn this case, context parameter contains an additional `inactivatedRoute` property,\nthat holds an information on the currently inactivated route.\nIf `inactivate` method returns `false`, inactivation and new path resolution is cancelled,\nrouter restores the state before new resolution.\nOtherwise router updates the active routes and waits for the next resolution to happen.\n\nNOTE: `inactivate` is considered to be an internal router feature, for the examples, refer to the router tests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1255,
              "column": 2
            },
            "end": {
              "line": 1258,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Object> | !Object)",
              "description": "a single route or an array of those"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addRoutes",
          "description": "Appends one or several routes to the routing config and returns the\neffective routing config after the operation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 918,
              "column": 2
            },
            "end": {
              "line": 921,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ],
          "return": {
            "type": "!Array.<!Route>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "resolve",
          "description": "Asynchronously resolves the given pathname, i.e. finds all routes matching\nthe pathname and tries resolving them one after another in the order they\nare listed in the routes config until the first non-null result.\n\nReturns a promise that is fulfilled with the return value of an object that consists of the first\nroute handler result that returns something other than `null` or `undefined` and context used to get this result.\n\nIf no route handlers return a non-null result, or if no route matches the\ngiven pathname the returned promise is rejected with a 'page not found'\n`Error`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 940,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   resolve or a context object with a `pathname` property and other\n   properties to pass to the route resolver functions."
            }
          ],
          "return": {
            "type": "!Promise.<any>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "__resolveRoute",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1114,
              "column": 2
            },
            "end": {
              "line": 1148,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            }
          ]
        },
        {
          "name": "__processComponent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1150,
              "column": 2
            },
            "end": {
              "line": 1161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "route"
            },
            {
              "name": "context"
            }
          ]
        },
        {
          "name": "__runInactivationChain",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1163,
              "column": 2
            },
            "end": {
              "line": 1176,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "divergedRouteIndex"
            },
            {
              "name": "context"
            }
          ]
        },
        {
          "name": "setOutlet",
          "description": "Sets the router outlet (the DOM node where the content for the current\nroute is inserted). Any content pre-existing in the router outlet is\nremoved at the end of each render pass.\n\nNOTE: this method is automatically invoked first time when creating a new Router instance.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1188,
              "column": 2
            },
            "end": {
              "line": 1193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "outlet",
              "type": "?Node",
              "description": "the DOM node where the content for the current route\n    is inserted."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getOutlet",
          "description": "Returns the current router outlet. The initial value is `undefined`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1200,
              "column": 2
            },
            "end": {
              "line": 1202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "?Node",
            "desc": "the current router outlet (or `undefined`)"
          }
        },
        {
          "name": "render",
          "description": "Asynchronously resolves the given pathname and renders the resolved route\ncomponent into the router outlet. If no router outlet is set at the time of\ncalling this method, or at the time when the route resolution is completed,\na `TypeError` is thrown.\n\nReturns a promise that is fulfilled with the router outlet DOM Node after\nthe route component is created and inserted into the router outlet, or\nrejected if no route matches the given path.\n\nIf another render pass is started before the previous one is completed, the\nresult of the previous render pass is ignored.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1278,
              "column": 2
            },
            "end": {
              "line": 1326,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   render or a context object with a `pathname` property and other\n   properties to pass to the resolver."
            },
            {
              "name": "shouldUpdateHistory"
            }
          ],
          "return": {
            "type": "!Promise.<!Node>"
          }
        },
        {
          "name": "__ensureOutlet",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1328,
              "column": 2
            },
            "end": {
              "line": 1332,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "outlet",
              "defaultValue": "this.__outlet"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__updateBrowserHistory",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1334,
              "column": 2
            },
            "end": {
              "line": 1340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__setOutletContent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1342,
              "column": 2
            },
            "end": {
              "line": 1354,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "subscribe",
          "description": "Subscribes this instance to navigation events on the `window`.\n\nNOTE: beware of resource leaks. For as long as a router instance is\nsubscribed to navigation events, it won't be garbage collected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1362,
              "column": 2
            },
            "end": {
              "line": 1365,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "unsubscribe",
          "description": "Removes the subscription to navigation events created in the `subscribe()`\nmethod.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1371,
              "column": 2
            },
            "end": {
              "line": 1374,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__onNavigationEvent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1376,
              "column": 2
            },
            "end": {
              "line": 1381,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [
        {
          "name": "setTriggers",
          "description": "Configures what triggers Vaadin.Router navigation events:\n - `POPSTATE`: popstate events on the current `window`\n - `CLICK`: click events on `<a>` links leading to the current page\n\nThis method is invoked with the pre-configured values when creating a new Router instance.\nBy default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.\n\nSee the `router-config.js` for the default navigation triggers config. Based on it, you can\ncreate the own one and only import the triggers you need, instead of pulling in all the code,\ne.g. if you want to handle `click` differently.\n\nSee also **Navigation Triggers** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1399,
              "column": 2
            },
            "end": {
              "line": 1401,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "triggers",
              "type": "...NavigationTrigger",
              "rest": true
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 1075,
          "column": 0
        },
        "end": {
          "line": 1402,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Vaadin.Resolver",
      "name": "Vaadin.Router"
    }
  ]
}
