{
  "schema_version": "1.0.0",
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "dist/vaadin-router.js",
      "properties": [],
      "methods": [
        {
          "name": "getRoutes",
          "description": "Returns the current list of routes (as a shallow copy). Adding / removing\nroutes to / from the returned array does not affect the routing config,\nbut modifying the route objects does.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 911,
              "column": 2
            },
            "end": {
              "line": 913,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!Route>"
          }
        },
        {
          "name": "setRoutes",
          "description": "Sets the routing config (replacing the existing one).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 921,
              "column": 2
            },
            "end": {
              "line": 925,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addRoutes",
          "description": "Appends one or several routes to the routing config and returns the\neffective routing config after the operation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 936,
              "column": 2
            },
            "end": {
              "line": 940,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ],
          "return": {
            "type": "!Array.<!Route>"
          }
        },
        {
          "name": "removeRoutes",
          "description": "Removes all existing routes from the routing config.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 945,
              "column": 2
            },
            "end": {
              "line": 947,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "resolve",
          "description": "Asynchronously resolves the given pathname, i.e. finds all routes matching\nthe pathname and tries resolving them one after another in the order they\nare listed in the routes config until the first non-null result.\n\nReturns a promise that is fulfilled with the return value of an object that consists of the first\nroute handler result that returns something other than `null` or `undefined` and context used to get this result.\n\nIf no route handlers return a non-null result, or if no route matches the\ngiven pathname the returned promise is rejected with a 'page not found'\n`Error`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 966,
              "column": 2
            },
            "end": {
              "line": 1034,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   resolve or a context object with a `pathname` property and other\n   properties to pass to the route resolver functions."
            }
          ],
          "return": {
            "type": "!Promise.<any>"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 890,
          "column": 0
        },
        "end": {
          "line": 1035,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "Vaadin.Resolver"
    },
    {
      "description": "A simple client-side router for single-page applications. It uses\nexpress-style middleware and has a first-class support for Web Components and\nlazy-loading. Works great in Polymer and non-Polymer apps.\n\nUse `new Router(outlet)` to create a new Router instance. The `outlet` parameter is a reference to the DOM node\nto render the content into. The Router instance is automatically subscribed to navigation events on `window`.\n\nSee [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html) for the detailed usage demo and code snippets.\n\nSee also detailed API docs for the following methods, for the advanced usage:\n\n* [setOutlet](#/classes/Vaadin.Router#method-setOutlet) – should be used to configure the outlet.\n* [setTriggers](#/classes/Vaadin.Router#method-setTriggers) – should be used to configure the navigation events.\n* [setRoutes](#/classes/Vaadin.Router#method-setRoutes) – should be used to configure the routes.\n\nOnly `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.",
      "summary": "JavaScript class that renders different DOM content depending on\n   a given path. It can re-render when triggered or automatically on\n   'popstate' and / or 'click' events.",
      "path": "dist/vaadin-router.js",
      "properties": [
        {
          "name": "ready",
          "type": "!Promise.<?Node>",
          "description": "A promise that is settled after the current render cycle completes. If\nthere is no render cycle in progress the promise is immediately settled\nwith the last render cycle result.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1212,
              "column": 4
            },
            "end": {
              "line": 1212,
              "column": 15
            }
          },
          "metadata": {}
        },
        {
          "name": "activeRoutes",
          "type": "!Array.<Route>",
          "description": "A read-only list of the currently active routes (starting from the root\ndown to a leaf of the routes config tree). The list is initially empty\nand gets updated after each _completed_ render call. When a render fails\nthe `activeRoutes` is set to an empty list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1224,
              "column": 4
            },
            "end": {
              "line": 1224,
              "column": 22
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "getRoutes",
          "description": "Returns the current list of routes (as a shallow copy). Adding / removing\nroutes to / from the returned array does not affect the routing config,\nbut modifying the route objects does.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 911,
              "column": 2
            },
            "end": {
              "line": 913,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!Route>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "setRoutes",
          "description": "Sets the routing config (replacing the existing one) and triggers a\nnavigation event so that the router outlet is refreshed according to the\ncurrent `window.location` and the new routing config.\n\nEach route object may have the following properties, listed here in the processing order:\n* `path` – the route path (relative to the parent route if any) in the\n[express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n\n* `action` – the action that is executed before the route is resolved.\nThe value for this property should be a function, accepting a `context` parameter described below.\nIf present, this function is always invoked first, disregarding of the other properties' presence.\nIf the action returns a non-empty result, current route resolution is finished and other route config properties are ignored.\nSee also **Route Actions** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).\n\n* `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.\nThe target route should also be defined.\nSee also **Redirects** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).\n\n* `bundle` – `.js` or `.mjs` bundle to load before resolving the route. Each bundle is only loaded once.\nThe property is ignored when either an `action` returns the result or `redirect` property is present.\nAny error, e.g. 404 while loading bundle will cause route resolution to throw.\nSee also **Code Splitting** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).\n\n* `children` – an array of nested routes or a function that provides this\narray at the render time. The function can be synchronous or asynchronous:\nin the latter case the render is delayed until the returned promise is\nresolved. The `children` function is executed every time when this route is\nbeing rendered. This allows for dynamic route structures (e.g. backend-defined),\nbut it might have a performance impact as well. In order to avoid calling\nthe function on subsequent renders, you can override the `children` property\nof the route object and save the calculated array there\n(via `context.route.children = [ route1, route2, ...];`).\nParent routes are fully resolved before resolving the children. Children\n'path' values are relative to the parent ones.\n\n* `component` – the tag name of the Web Component to resolve the route to.\nThe property is ignored when either an `action` returns the result or `redirect` property is present.\nIf route contains the `component` property (or an action that return a component)\nand its child route also contains the `component` property, child route's component\nwill be rendered as a light dom child of a parent component.\n\nFor any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback\nthrough the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function\nbecause arrow functions do not have their own `this` reference.\n\n`context` object that is passed to `action` function holds the following properties:\n* `context.pathname` – string with the pathname being resolved\n\n* `context.params` – object with route parameters\n\n* `context.route` – object that holds the route that is currently being rendered.\n\n* `context.next()` – function for asynchronously getting the next route contents from the resolution chain (if any)\n\n* `context.redirect(path)` – function that creates a redirect data for the path specified.\n\n* `context.component(component)` – function that creates a new HTMLElement with current context",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1361,
              "column": 2
            },
            "end": {
              "line": 1364,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Object> | !Object)",
              "description": "a single route or an array of those"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addRoutes",
          "description": "Appends one or several routes to the routing config and returns the\neffective routing config after the operation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 936,
              "column": 2
            },
            "end": {
              "line": 940,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "routes",
              "type": "(!Array.<!Route> | !Route)",
              "description": "a single route or an array of those\n   (the array is shallow copied)"
            }
          ],
          "return": {
            "type": "!Array.<!Route>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "removeRoutes",
          "description": "Removes all existing routes from the routing config.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 945,
              "column": 2
            },
            "end": {
              "line": 947,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "resolve",
          "description": "Asynchronously resolves the given pathname, i.e. finds all routes matching\nthe pathname and tries resolving them one after another in the order they\nare listed in the routes config until the first non-null result.\n\nReturns a promise that is fulfilled with the return value of an object that consists of the first\nroute handler result that returns something other than `null` or `undefined` and context used to get this result.\n\nIf no route handlers return a non-null result, or if no route matches the\ngiven pathname the returned promise is rejected with a 'page not found'\n`Error`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 966,
              "column": 2
            },
            "end": {
              "line": 1034,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   resolve or a context object with a `pathname` property and other\n   properties to pass to the route resolver functions."
            }
          ],
          "return": {
            "type": "!Promise.<any>"
          },
          "inheritedFrom": "Vaadin.Resolver"
        },
        {
          "name": "__resolveRoute",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1233,
              "column": 2
            },
            "end": {
              "line": 1272,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            }
          ]
        },
        {
          "name": "setOutlet",
          "description": "Sets the router outlet (the DOM node where the content for the current\nroute is inserted). Any content pre-existing in the router outlet is\nremoved at the end of each render pass.\n\nNOTE: this method is automatically invoked first time when creating a new Router instance.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1284,
              "column": 2
            },
            "end": {
              "line": 1289,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "outlet",
              "type": "?Node",
              "description": "the DOM node where the content for the current route\n    is inserted."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getOutlet",
          "description": "Returns the current router outlet. The initial value is `undefined`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1296,
              "column": 2
            },
            "end": {
              "line": 1298,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "?Node",
            "desc": "the current router outlet (or `undefined`)"
          }
        },
        {
          "name": "render",
          "description": "Asynchronously resolves the given pathname and renders the resolved route\ncomponent into the router outlet. If no router outlet is set at the time of\ncalling this method, or at the time when the route resolution is completed,\na `TypeError` is thrown.\n\nReturns a promise that is fulfilled with the router outlet DOM Node after\nthe route component is created and inserted into the router outlet, or\nrejected if no route matches the given path.\n\nIf another render pass is started before the previous one is completed, the\nresult of the previous render pass is ignored.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1384,
              "column": 2
            },
            "end": {
              "line": 1429,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext",
              "type": "(!string | !{pathname: !string})",
              "description": "the pathname to\n   render or a context object with a `pathname` property and other\n   properties to pass to the resolver."
            },
            {
              "name": "shouldUpdateHistory"
            }
          ],
          "return": {
            "type": "!Promise.<!Node>"
          }
        },
        {
          "name": "__fullyResolveChain",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1431,
              "column": 2
            },
            "end": {
              "line": 1442,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "originalContext"
            },
            {
              "name": "currentContext"
            }
          ]
        },
        {
          "name": "__amendWithResolutionResult",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1444,
              "column": 2
            },
            "end": {
              "line": 1463,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            }
          ]
        },
        {
          "name": "__amendWithLifecycleCallbacks",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1465,
              "column": 2
            },
            "end": {
              "line": 1472,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contextWithFullChain"
            }
          ]
        },
        {
          "name": "__runLifecycleCallbacks",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1474,
              "column": 2
            },
            "end": {
              "line": 1515,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newContext"
            }
          ]
        },
        {
          "name": "__redirect",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1517,
              "column": 2
            },
            "end": {
              "line": 1527,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "redirectData"
            },
            {
              "name": "counter"
            }
          ]
        },
        {
          "name": "__ensureOutlet",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1529,
              "column": 2
            },
            "end": {
              "line": 1533,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "outlet",
              "defaultValue": "this.__outlet"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__updateBrowserHistory",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1535,
              "column": 2
            },
            "end": {
              "line": 1542,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathnameOrContext"
            },
            {
              "name": "replace"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__setOutletContent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1544,
              "column": 2
            },
            "end": {
              "line": 1587,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__removeOldOutletContent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1589,
              "column": 2
            },
            "end": {
              "line": 1595,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__removePendingContent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1597,
              "column": 2
            },
            "end": {
              "line": 1602,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__removeOutletContent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1604,
              "column": 2
            },
            "end": {
              "line": 1612,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "content"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__runOnAfterCallbacks",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1614,
              "column": 2
            },
            "end": {
              "line": 1625,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentContext"
            },
            {
              "name": "targetContext"
            },
            {
              "name": "callbackName"
            }
          ]
        },
        {
          "name": "__animateIfNeeded",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1627,
              "column": 2
            },
            "end": {
              "line": 1656,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            }
          ]
        },
        {
          "name": "subscribe",
          "description": "Subscribes this instance to navigation events on the `window`.\n\nNOTE: beware of resource leaks. For as long as a router instance is\nsubscribed to navigation events, it won't be garbage collected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1664,
              "column": 2
            },
            "end": {
              "line": 1666,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "unsubscribe",
          "description": "Removes the subscription to navigation events created in the `subscribe()`\nmethod.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1672,
              "column": 2
            },
            "end": {
              "line": 1674,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__onNavigationEvent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 1676,
              "column": 2
            },
            "end": {
              "line": 1679,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [
        {
          "name": "setTriggers",
          "description": "Configures what triggers Vaadin.Router navigation events:\n - `POPSTATE`: popstate events on the current `window`\n - `CLICK`: click events on `<a>` links leading to the current page\n\nThis method is invoked with the pre-configured values when creating a new Router instance.\nBy default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.\n\nSee the `router-config.js` for the default navigation triggers config. Based on it, you can\ncreate the own one and only import the triggers you need, instead of pulling in all the code,\ne.g. if you want to handle `click` differently.\n\nSee also **Navigation Triggers** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1697,
              "column": 2
            },
            "end": {
              "line": 1699,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "triggers",
              "type": "...NavigationTrigger",
              "rest": true
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "go",
          "description": "Triggers navigation to a new path and returns without waiting until the\nnavigation is complete.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1707,
              "column": 2
            },
            "end": {
              "line": 1709,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathname",
              "type": "!string",
              "description": "a new in-app path"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 1183,
          "column": 0
        },
        "end": {
          "line": 1710,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Vaadin.Resolver",
      "name": "Vaadin.Router"
    },
    {
      "description": "",
      "summary": "",
      "path": "dist/vaadin-router.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 1715,
          "column": 32
        },
        "end": {
          "line": 1723,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement"
    },
    {
      "description": "This interface describes the lifecycle callbacks supported by `Vaadin.Router`\non view Web Components. It exists only for documentation purposes, i.e.\nyou _do not need_ to extend it in your code&mdash;defining a method with a\nmatching name is enough (this class does not exist at the run time).\n\nIf any of the methods described below are defined in a view Web Component,\n`Vaadin.Router` calls them at the corresponding points of the view\nlifecycle. Each method can either be synchronous or asynchronous (i.e. return\na Promise). In the latter case `Vaadin.Router` waits until the promise is\nresolved and continues the navigation after that.\n\nCheck the [documentation on the Vaadin.Router class](#/classes/Vaadin.Router)\nto learn more.\n\nLifecycle callbacks are executed after the new path is resolved and after all\n`action` callbacks of the routes in the new path are executed.\n\nExample:\n\nFor the following routes definition,\n```\n// router and action declarations are omitted for brevity\nrouter.setRoutes([\n {path: '/a', action: actionA, children: [\n   {path: '/b', action: actionB, component: 'component-b'},\n   {path: '/c', action: actionC, component: 'component-c'}\n ]}\n]);\n```\nif the router first navigates to `/a/b` path and there was no view rendered\nbefore, the following events happen:\n* actionA\n* actionB\n* onBeforeEnterB (if defined in component-b)\n* outlet contents updated with component-b\n* onAfterEnterB (if defined in component-b)\n\nthen, if the router navigates to `/a/c`, the following events take place:\n* actionA\n* actionC\n* onBeforeLeaveB  (if defined in component-b)\n* onBeforeEnterC (if defined in component-c)\n* onAfterLeaveB  (if defined in component-b)\n* outlet contents updated with component-c\n* onAfterEnterC (if defined in component-c)\n\nIf a `Promise` is returned by any of the callbacks, it is resolved before proceeding further.\nAny of the `onBefore...` callbacks have a possibility to cancel the navigation and fall back\nto the previous navigation result (if there is no result and this is the first resolution, an exception is thrown).\n`onAfter...` callbacks are considered as non-cancellable, and their return value is ignored.\n\nOther examples can be found in the\n[live demos](#/classes/Vaadin.Router/demos/demo/index.html) and tests.",
      "summary": "",
      "path": "src/documentation/web-component-interface.js",
      "properties": [],
      "methods": [
        {
          "name": "onBeforeLeave",
          "description": "Method that gets executed when user navigates away from the component that had defined the method.\nThe user can prevent the navigation by returning `context.cancel()` from the method or same value wrapped in `Promise`.\nThis effectively means that the corresponding component should be resolved by the router before the method can be executed.\nIf the router navigates to the same path twice in a row, in the second time the method is not called.\nThe WebComponent instance on which the callback has been invoked is available inside the callback through the `this` reference.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "description": "the context object with the following properties:\n\n| Property           | Description\n| -------------------|-------------\n| `context.pathname` | string with the pathname being rendered.\n| `context.params`   | object with route parameters, contains string keys for named and numeric keys for unnamed parameters.\n| `context.route`    | object that holds the route being rendered.\n| `context.cancel()` | function that creates a special object that can be returned to abort the current navigation and fall back to the last one. If there is no existing one, an exception is thrown.\n\nReturn values:\n\n* if `context.cancel()` is returned (immediately or as a Promise), the navigation is aborted and the outlet contents is not updated.\n* any other return value is ignored and Vaadin.Router proceeds with the navigation."
            }
          ]
        },
        {
          "name": "onBeforeEnter",
          "description": "Method that gets executed before the outlet contents is updated with the new element.\nThe user can prevent the navigation by returning `context.cancel()` from the method or same value wrapped in `Promise`.\nIf the router navigates to the same path twice in a row, in the second time the method is not called.\nthe WebComponent instance on which the callback has been invoked is available inside the callback through the `this` reference.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 113,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "description": "the context object with the following properties:\n\n| Property                 | Description\n| -------------------------|-------------\n| `context.pathname`       | string with the pathname being rendered.\n| `context.params`         | object with route parameters, contains string keys for named and numeric keys for unnamed parameters.\n| `context.route`          | object that holds the route being rendered.\n| `context.redirect(path)` | function that creates a redirect data for the path specified, to use as a return value from the callback.\n| `context.cancel()`       | function that creates a special object that can be returned to abort the current navigation and fall back to the last one. If there is no existing one, an exception is thrown.\n\nReturn values:\n\n* if a `context.cancel()` object is returned (immediately or as a Promise), the navigation is aborted and the outlet contents is not updated.\n* if a `context.redirect(path)` object is returned (immediately or as a Promise), Vaadin.Router ends navigation to the current path, and starts a new navigation cycle to the new path.\n* any other return value is ignored and Vaadin.Router proceeds with the navigation."
            }
          ]
        },
        {
          "name": "onAfterLeave",
          "description": "Method that gets executed when user navigates away from the component that had defined the method, just before the element is to be removed from the DOM.\nThe difference between this method and `onBeforeLeave` is that when this method is executed, there is no way to abort the navigation.\nThis effectively means that the corresponding component should be resolved by the router before the method can be executed.\nIf the router navigates to the same path twice in a row, in the second time the method is not called.\nThe WebComponent instance on which the callback has been invoked is available inside the callback through the `this` reference.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "description": "the context object with the following properties:\n\n| Property           | Description\n| ------------------ |-------------\n| `context.pathname` | string with the pathname being rendered.\n| `context.params`   | object with route parameters, contains string keys for named and numeric keys for unnamed parameters.\n| `context.route`    | object that holds the route being rendered.\n\nReturn values: any return value is ignored and Vaadin.Router proceeds with the navigation."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "onAfterEnter",
          "description": "Method that gets executed after the outlet contents is updated with the new element.\nIf the router navigates to the same path twice in a row, in the second time the method is not called.\nThe WebComponent instance on which the callback has been invoked is available inside the callback through the `this` reference.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 2
            },
            "end": {
              "line": 158,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "description": "the context object with the following properties:\n\n| Property           | Description\n| ------------------ |-------------\n| `context.pathname` | string with the pathname being rendered.\n| `context.params`   | object with route parameters, contains string keys for named and numeric keys for unnamed parameters.\n| `context.route`    | object that holds the route being rendered.\n\nReturn values: any return value is ignored and Vaadin.Router proceeds with the navigation."
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 57,
          "column": 7
        },
        "end": {
          "line": 159,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "Vaadin.WebComponentInterface"
    }
  ]
}
